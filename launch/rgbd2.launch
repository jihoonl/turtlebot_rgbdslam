<!-- 
  Example launch file for octomap_server mapping using nodelets: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
  <arg name="camera" default="camera"/>
  <arg name="depth" default="depth_registered"/>
  <arg name="points" default="remote_points"/>
  <arg name="nodelet_name" default="remote_nodelet"/>
  <arg name="respawn" default="false"/>
  <arg     if="$(arg respawn)" name="bond" value="" />
  <arg unless="$(arg respawn)" name="bond" value="--no-bond" />

  <!--
  <arg name="depth_remap" value="$(arg camera)/$(arg depth)/image_rect_raw"/>
  <arg name="rgb_remap" value="$(arg camera)/rgb/image_rect_color"/>
  <arg name="rgb_info_remap" value="$(arg camera)/rgb/camera_info"/>
  -->
   <arg name="depth_remap" default="/rgbd/depth"/>
   <arg name="rgb_remap" default="/rgbd/rgb"/>
   <arg name="rgb_info_remap" default="/rgbd/info"/>

<!--  <include file="$(find turtlebot_rgbdslam)/launch/depth_to_pointcloud.launch"/>-->
<!--  <include file="$(find turtlebot_rgbdslam)/launch/image_relay.launch"/>-->
  <include file="$(find turtlebot_rgbdslam)/launch/visual_odometry.launch">
    <arg name="depth_remap" value="$(arg depth_remap)"/>
    <arg name="rgb_remap" value="$(arg rgb_remap)"/>
    <arg name="rgb_info_remap" value="$(arg rgb_info_remap)"/>
  </include>
  <include file="$(find turtlebot_rgbdslam)/launch/keyframe_mapper.launch">
    <arg name="depth_remap" value="$(arg depth_remap)"/>
    <arg name="rgb_remap" value="$(arg rgb_remap)"/>
    <arg name="rgb_info_remap" value="$(arg rgb_info_remap)"/>
  </include>
</launch>

