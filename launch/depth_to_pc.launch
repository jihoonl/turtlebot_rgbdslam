<!-- 
  Example launch file for octomap_server mapping using nodelets: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
  <arg name="camera" default="camera"/>
  <arg name="depth" default="depth_registered"/>
  <arg name="points" default="remote_points"/>
  <arg name="nodelet_name" default="remote_nodelet"/>
  <arg name="respawn" default="false"/>
  <arg     if="$(arg respawn)" name="bond" value="" />
  <arg unless="$(arg respawn)" name="bond" value="--no-bond" />

  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_name)"  args="manager"/>
  <group ns="$(arg camera)">
    <node pkg="nodelet" type="nodelet" name="remote_points_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb /$(arg nodelet_name) $(arg bond)"  respawn="$(arg respawn)">
      <param name="image_transport" value="compressed"/>
      <param name="depth_image_transport" value="compressedDepth"/>
      <remap from="rgb/camera_info" to="/keyframes/camera_info"/>
      <remap from="rgb/image_rect_color/compressed" to="/keyframes/rgb/compressed"/>
      <remap from="$(arg depth)/image_rect/compressedDepth" to="/keyframes/depth/compressedDepth"/>
      <remap from="$(arg depth)/points" to="$(arg depth)/$(arg points)"/>
    </node>
  </group>
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
<!--  ## <node pkg="nodelet" type="nodelet" name="octomap_server_nodelet" args="load octomap_server/OctomapServerNodelet $(arg nodelet_name) $(arg bond)" respawn="$(arg respawn)">-->
  
      <param name="resolution" value="0.05" />

      <param name="frame_id" type="string" value="odom" />
    
      <param name="sensor_model/max_range" value="5.0" />
     
      <remap from="cloud_in" to="$(arg camera)/$(arg depth)/$(arg points)" />
    </node>
</launch>
